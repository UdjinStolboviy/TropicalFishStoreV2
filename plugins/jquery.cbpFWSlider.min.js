! function (t, i, s) {
    "use strict";
    var n = i.Modernizr;
    t.CBPFWSlider = function (i, s) {
        this.$el = t(s), this._init(i)
    }, t.CBPFWSlider.defaults = {
        speed: 500,
        easing: "ease"
    }, t.CBPFWSlider.prototype = {
        _init: function (i) {
            this.options = t.extend(!0, {}, t.CBPFWSlider.defaults, i), this._config(), this._initEvents()
        },
        _config: function () {
            this.$list = this.$el.children("ul"), this.$items = this.$list.children("li"), this.itemsCount = this.$items.length, this.support = n.csstransitions && n.csstransforms, this.support3d = n.csstransforms3d;
            var i = {
                    WebkitTransition: "webkitTransitionEnd",
                    MozTransition: "transitionend",
                    OTransition: "oTransitionEnd",
                    msTransition: "MSTransitionEnd",
                    transition: "transitionend"
                },
                s = {
                    WebkitTransform: "-webkit-transform",
                    MozTransform: "-moz-transform",
                    OTransform: "-o-transform",
                    msTransform: "-ms-transform",
                    transform: "transform"
                };
            if (this.support && (this.transEndEventName = i[n.prefixed("transition")] + ".cbpFWSlider", this.transformName = s[n.prefixed("transform")]), this.current = 0, this.old = 0, this.isAnimating = !1, this.$list.css("width", 100 * this.itemsCount + "%"), this.support && this.$list.css("transition", this.transformName + " " + this.options.speed + "ms " + this.options.easing), this.$items.css("width", 100 / this.itemsCount + "%"), this.itemsCount > 1) {
                this.$el.animate({
                    height: this.$items.eq(this.current).css("height")
                }, 300), this.$el.attr("current", this.current), this.$navPrev = t('<span class="cbp-fwprev"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 100 125" enable-background="new 0 0 100 100" xml:space="preserve"><path class="corporate-color-fill-path" fill="#000000" d="M64.546,80.331c-0.64,0-1.279-0.244-1.768-0.732L35.417,52.236c-0.469-0.469-0.732-1.104-0.732-1.768  s0.264-1.299,0.732-1.768l27.363-27.36c0.977-0.977,2.559-0.977,3.535,0s0.977,2.56,0,3.535L40.72,50.469l25.594,25.595  c0.977,0.977,0.977,2.559,0,3.535C65.825,80.087,65.186,80.331,64.546,80.331z"/></svg></span>').hide(), this.$navNext = t('<span class="cbp-fwnext"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 100 125" enable-background="new 0 0 100 100" xml:space="preserve"><g><path class="corporate-color-fill-path" fill="#000000" d="M36.318,79.859c-0.64,0-1.279-0.244-1.768-0.732c-0.977-0.977-0.977-2.56,0-3.535l25.596-25.593L34.553,24.404   c-0.977-0.977-0.977-2.559,0-3.535s2.559-0.977,3.535,0l27.361,27.362c0.469,0.469,0.732,1.104,0.732,1.768   s-0.264,1.299-0.732,1.768l-27.363,27.36C37.598,79.615,36.958,79.859,36.318,79.859z"/></g></svg></span>'), t("<nav/>").append(this.$navPrev, this.$navNext).appendTo(this.$el);
                for (var e = "", r = 0; r < this.itemsCount; ++r) {
                    var h = r === this.current ? '<span class="cbp-fwcurrent"></span>' : "<span></span>";
                    e += h
                }
                var a = t('<div class="cbp-fwdots"/>').append(e).appendTo(this.$el);
                this.$navDots = a.children("span")
            }
        },
        _initEvents: function () {
            var i = this;
            this.itemsCount > 1 && (this.$navPrev.on("click.cbpFWSlider", t.proxy(this._navigate, this, "previous")), this.$navNext.on("click.cbpFWSlider", t.proxy(this._navigate, this, "next")), this.$navDots.on("click.cbpFWSlider", function () {
                i._jump(t(this).index())
            }))
        },
        _navigate: function (t) {
            return this.isAnimating ? !1 : (this.isAnimating = !0, this.old = this.current, "next" === t && this.current < this.itemsCount - 1 ? ++this.current : "previous" === t && this.current > 0 && --this.current, void this._slide())
        },
        _slide: function () {
            this._toggleNavControls();
            var i = -1 * this.current * 100 / this.itemsCount;
            this.support ? this.$list.css("transform", this.support3d ? "translate3d(" + i + "%,0,0)" : "translate(" + i + "%)") : this.$list.css("margin-left", -1 * this.current * 100 + "%");
            var s = t.proxy(function () {
                this.isAnimating = !1, this.$el.animate({
                    height: this.$items.eq(this.current).css("height")
                }, 300), this.$el.attr("current", this.current)
            }, this);
            this.support ? this.$list.on(this.transEndEventName, t.proxy(s, this)) : s.call()
        },
        _toggleNavControls: function () {
            switch (this.current) {
                case 0:
                    this.$navNext.show(), this.$navPrev.hide();
                    break;
                case this.itemsCount - 1:
                    this.$navNext.hide(), this.$navPrev.show();
                    break;
                default:
                    this.$navNext.show(), this.$navPrev.show()
            }
            this.$navDots.eq(this.old).removeClass("cbp-fwcurrent").end().eq(this.current).addClass("cbp-fwcurrent")
        },
        _jump: function (t) {
            return t === this.current || this.isAnimating ? !1 : (this.isAnimating = !0, this.old = this.current, this.current = t, void this._slide())
        },
        destroy: function () {
            this.itemsCount > 1 && (this.$navPrev.parent().remove(), this.$navDots.parent().remove()), this.$list.css("width", "auto"), this.support && this.$list.css("transition", "none"), this.$items.css("width", "auto")
        }
    };
    var e = function (t) {
        i.console && i.console.error(t)
    };
    t.fn.cbpFWSlider = function (i) {
        if ("string" == typeof i) {
            var s = Array.prototype.slice.call(arguments, 1);
            this.each(function () {
                var n = t.data(this, "cbpFWSlider");
                return n ? t.isFunction(n[i]) && "_" !== i.charAt(0) ? void n[i].apply(n, s) : void e("no such method '" + i + "' for cbpFWSlider instance") : void e("cannot call methods on cbpFWSlider prior to initialization; attempted to call method '" + i + "'")
            })
        } else this.each(function () {
            var s = t.data(this, "cbpFWSlider");
            s ? s._init() : s = t.data(this, "cbpFWSlider", new t.CBPFWSlider(i, this))
        });
        return this
    }, t(i).resize(function () {
        t(".cbp-fwslider").each(function (i) {
            t(this).animate({
                height: t(this).find("li").eq(t(this).attr("current")).css("height")
            }, 300)
        })
    })
}(jQuery, window);